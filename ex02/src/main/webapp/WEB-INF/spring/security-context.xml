<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd">

	<!-- bean설정 -->
	<bean id="customAccessDenied" class="org.ezen.ex02.security.CustomAccessDeniedHandler"></bean>
	
	<bean id="customLoginSuccess" class="org.ezen.ex02.security.CustomLoginSuccessHandler"></bean>
	
	<bean id="customPasswordEncoder" class="org.ezen.ex02.security.CustomNoOpPasswordEncoder"></bean>
	
	<!-- 시큐리티 최소 동작을 위한 설정 -->
	<security:http>
		<security:intercept-url pattern="/member/all" access="permitAll"/>
		<!-- 권한 ROLE_ 은 로그인 해야만 주어짐 -->
		<security:intercept-url pattern="/member/member" access="hasAnyRole('ROLE_MEMBER','ROLE_MANAGER','ROLE_ADMIN')"/>
		<security:intercept-url pattern="/member/admin" access="hasRole('ROLE_ADMIN')"/>
		
		<!-- 로그인 후 접근 권한이 없는 요청 경로로 요청시 에러 처리 -->
		<!-- error-page속성 사용 -->
		<!-- 
		<security:access-denied-handler error-page="/member/accessError"/>
		-->
		<!-- AccessDeniedHandle인터페이스 구현한 클래스를 bean으로 지정하여 사용 -->
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- form 로그인 처리 -->
		<!-- 기본 처리 스프링 제공 로그인 form 사용 
		<security:form-login/>
		-->
		<!-- 사용자 정의 login form 사용,커스텀 로그인 요청 경로 사용,성공시 미처리 -->
		<!-- 
		<security:form-login login-page="/member/customLogin"/>
		-->
		
		<!-- 사용자 정의 login form 사용,커스텀 로그인 요청 경로 사용,성공시 처리 -->
		<security:form-login login-page="/member/customLogin" authentication-success-handler-ref="customLoginSuccess"/>
		
		<security:logout logout-url="/member/customLogout" invalidate-session="true"/>
		
		<security:csrf disabled="true"/> <!-- 기존 ajax upload 동작을 위한 csrf임시 처리 -->
	</security:http>
	
	<!-- inMemory방식(시스템메모리에 설정하여 사용) -->
	<!-- 
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="{noop}admin" authorities="ROLE_MEMBER,ROLE_ADMIN"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	-->
	
	<!-- 스프링 정의 지정된 테이블 사용 방식 -->
	<security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service data-source-ref="dataSource"/>
			<security:password-encoder ref="customPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
